name: CI

on:
  push:
    branches:
      - main
      - develop
    paths-ignore:
      - "**/CHANGELOG.md"
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}
  cancel-in-progress: true

# env:
#   DOCKER_IMAGE: hirosystems/${{ github.event.repository.name }}

jobs:
  runehook-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Setup integration environment
        run: |
          sudo ufw disable
          docker-compose -f docker/docker-compose.dev.postgres.yml up -d
          docker-compose -f docker/docker-compose.dev.postgres.yml logs -t -f --no-color &> docker-compose-logs.txt &

      - name: Cargo test
        run: |
          rustup update
          RUST_BACKTRACE=1 cargo test --all -- --test-threads=1

      # - name: Upload coverage reports to Codecov
      #   uses: codecov/codecov-action@v4.0.1
      #   with:
      #     token: ${{ secrets.CODECOV_TOKEN }}
      #     slug: hirosystems/ordhook
      
      - name: Print integration environment logs
        run: cat docker-compose-logs.txt
        if: failure()

      - name: Teardown integration environment
        run: docker-compose -f docker/docker-compose.dev.postgres.yml down -v -t 0
        if: always()

  # runehook-build-publish:
  #   runs-on: ubuntu-latest
  #   needs: runehook-test
  #   outputs:
  #     docker_image_digest: ${{ steps.docker_push.outputs.digest }}
  #     new_release_published: ${{ steps.semantic.outputs.new_release_published }}
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         persist-credentials: false

  #     - name: Semantic Release
  #       uses: cycjimmy/semantic-release-action@v4
  #       id: semantic
  #       # Only run on non-PR events or only PRs that aren't from forks
  #       if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         SEMANTIC_RELEASE_PACKAGE: ${{ github.event.repository.name }}
  #       with:
  #         semantic_version: 19
  #         extra_plugins: |
  #           @semantic-release/changelog@6.0.3
  #           @semantic-release/git@10.0.1
  #           conventional-changelog-conventionalcommits@6.1.0

  #     - name: Checkout tag
  #       if: steps.semantic.outputs.new_release_version != ''
  #       uses: actions/checkout@v4
  #       with:
  #         persist-credentials: false
  #         ref: v${{ steps.semantic.outputs.new_release_version }}

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Docker Meta
  #       id: meta
  #       uses: docker/metadata-action@v5
  #       with:
  #         images: |
  #           ${{ env.DOCKER_IMAGE }}
  #         tags: |
  #           type=ref,event=branch
  #           type=ref,event=pr
  #           type=semver,pattern={{version}},value=${{ steps.semantic.outputs.new_release_version }},enable=${{ steps.semantic.outputs.new_release_version != '' }}
  #           type=semver,pattern={{major}}.{{minor}},value=${{ steps.semantic.outputs.new_release_version }},enable=${{ steps.semantic.outputs.new_release_version != '' }}
  #           type=raw,value=latest,enable={{is_default_branch}}

  #     - name: Log in to DockerHub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_PASSWORD }}

  #     - name: Build/Push Image
  #       uses: docker/build-push-action@v5
  #       id: docker_push
  #       with:
  #         context: .
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}
  #         file: ./dockerfiles/components/ordhook.dockerfile
  #         build-args: |
  #           GIT_COMMIT=${{ env.GITHUB_SHA_SHORT }}
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max
  #         # Only push if (there's a new release on main branch, or if building a non-main branch) and (Only run on non-PR events or only PRs that aren't from forks)
  #         push: ${{ (github.ref != 'refs/heads/main' || steps.semantic.outputs.new_release_version != '') && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository) }}
